/*
 * Copyright (C) 2005 - 2019 Schlichtherle IT Services.
 * All rights reserved. Use is subject to license terms.
 */
#set($keygen = "${package}.keygen")
#set($KeyGenMain = "${keygen}.Main")
#set($keymgr = "${package}.keymgr")
/* Generated from Velocity template at $date - DO NOT EDIT! */
package ${keymgr};

import global.namespace.truelicense.api.*;

import java.nio.file.Path;

import org.junit.*;
import org.junit.rules.*;

import static global.namespace.fun.io.bios.BIOS.*;

import static org.junit.Assert.*;

/**
 * @author Christian Schlichtherle
 */
public class LicenseManagerIT {

    @Rule
    public final TemporaryFolder folder = new TemporaryFolder();

    @Test
    public void testAcceptValidLicenseKeyForEditionAndSuperSets() throws Exception {
        forAllEditions(new ManagerTest() {

            final LicenseManager managers[] = LicenseManager.values();

            public void run(final LicenseManager manager) throws Exception {
                for (int ordinal = manager.ordinal(); ordinal < managers.length; ordinal++) {
                    managers[ordinal].verify();
                }
            }
        });
    }

    @Test
    public void testRejectValidLicenseKeyForFeatureSubSets() throws Exception {
        forAllEditions(new ManagerTest() {

            final LicenseManager managers[] = LicenseManager.values();

            public void run(final LicenseManager manager) throws Exception {
                for (int ordinal = manager.ordinal(); 0 <= --ordinal; ) {
                    try {
                        managers[ordinal].verify();
                        fail();
                    } catch (LicenseManagementException ignored) {
                    }
                }
            }
        });
    }

    private void forAllEditions(final ManagerTest test) throws Exception {
        for (final LicenseManager manager : LicenseManager.values()) {
            final String edition = manager.name();
            if (!"ftp".equalsIgnoreCase(edition)) {
                final Path licenseKey = folder.newFile(edition + ".lic").toPath();
                ${KeyGenMain}.process("generate", "-edition", edition, licenseKey.toString());
                manager.install(path(licenseKey));
                try {
                    test.run(manager);
                } finally {
                    manager.uninstall();
                }
            }
        }
    }

    private interface ManagerTest {
        void run(LicenseManager manager) throws Exception;
    }
}
