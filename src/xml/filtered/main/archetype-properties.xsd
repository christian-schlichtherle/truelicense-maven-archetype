<?xml version='1.0'?>
<!--
  ~ Copyright (C) 2005-2017 Schlichtherle IT Services.
  ~ All rights reserved. Use is subject to license terms.
  -->
<xs:schema
        elementFormDefault="qualified"
        targetNamespace="${project.url}/xml/archetype-properties"
        version="${project.version}"
        xml:lang="en"
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:p="${project.url}/xml/archetype-properties"
        xmlns:h="http://www.w3.org/1999/xhtml"
        xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:import namespace="http://www.w3.org/XML/1998/namespace"
               schemaLocation="http://www.w3.org/2001/xml.xsd"/>
    <xs:element type="p:Properties" name="properties"/>
    <xs:simpleType name="ArtifactId">
        <xs:annotation>
            <xs:documentation>
                A Maven artifact ID must not contain spaces and should consist
                of only lower-case characters - see
                <a href="http://maven.apache.org/pom.html#Maven_Coordinates">
                    Maven - POM Reference - Maven Coordinates
                </a>.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NCName"/>
    </xs:simpleType>
    <xs:simpleType name="CustomClasspathScope">
        <xs:annotation>
            <xs:documentation>
                Select <code>compile</code> to declare that custom classes are available on the class path at compile
                time.
                The advantage is that the classes can be safely included in the byte code obfuscation process.
                The disadvantage is that the classes need to be known at compile time so that manual editing of the
                dependencies in the generated POM files for the Key Generator or Key Manager module may be necessary.
                Select <code>runtime</code> to declare that custom classes are available on the class path at runtime
                only.
                The advantage is that the classes don't need to be known at compile time so that manual editing of the
                generated POM files should not be necessary.
                The disadvantage is that the classes need to be generally excluded from the byte code obfuscation
                process, e.g. for the Key Manager module.
                This is considered to be a security leak and therefore should be generally avoided.
                However, this is not true for <a href="http://proguard.sourceforge.net">ProGuard</a>:
                TrueLicense generates code for dynamic class loading which is correctly recognized and obfuscated by
                ProGuard so that it's safe to use this option with ProGuard.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="compile"/>
            <xs:enumeration value="runtime"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="Documentation" mixed="true">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="lax"/>
        </xs:sequence>
        <xs:attribute ref="xml:lang"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
    <xs:simpleType name="GroupId">
        <xs:annotation>
            <xs:documentation>
                A Maven group ID must not contain spaces and should consist
                of only lower-case characters - see
                <a href="http://maven.apache.org/pom.html#Maven_Coordinates">
                    Maven - POM Reference - Maven Coordinates
                </a>.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NCName"/>
    </xs:simpleType>
    <xs:simpleType name="JavaIdentifier">
        <xs:restriction base="xs:token">
            <!-- Not exactly, but good enough for this purpose. -->
            <xs:pattern value="[A-Za-z_$][A-Za-z0-9_$]*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="JavaIdentifierList">
        <xs:annotation>
            <xs:documentation>
                A space separated list of valid identifiers in the Java
                language.
            </xs:documentation>
        </xs:annotation>
        <xs:list itemType="p:JavaIdentifier"/>
    </xs:simpleType>
    <xs:simpleType name="KeyPairAlgorithm"
                   h:href="http://docs.oracle.com/javase/${javase.major}/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator">
        <xs:restriction base="xs:token">
            <xs:enumeration value="auto"/>
            <xs:enumeration value="DSA"/>
            <xs:enumeration value="EC"/>
            <xs:enumeration value="RSA"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="KeyStoreType"
                   h:href="http://docs.oracle.com/javase/${javase.major}/docs/technotes/guides/security/StandardNames.html#KeyStore">
        <xs:annotation>
            <xs:documentation>
                <code>PKCS12</code>
                requires Java SE 8.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="auto"/>
            <xs:enumeration value="JCEKS"/>
            <xs:enumeration value="JKS"/>
            <xs:enumeration value="PKCS12"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="LicenseFunctionComposition">
        <xs:annotation>
            <xs:documentation>
                Select
                <code>override</code>
                to apply only the custom function.
                Select
                <code>decorate</code>
                to apply both the custom function and the built-in function.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="decorate"/>
            <xs:enumeration value="override"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="LicenseKeyFormat">
        <xs:restriction base="xs:token">
            <xs:enumeration value="V1"/>
            <xs:enumeration value="V2/JSON"/>
            <xs:enumeration value="V2/XML"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="List">
        <xs:all>
            <xs:element type="p:ArtifactId" name="artifactId">
                <xs:annotation>
                    <xs:documentation>
                        The Maven artifact ID of the root
                        <a href="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html">
                            <abbr title="Project Object Model">POM</abbr>
                        </a>
                        for the generated project.
                        This could match the name of your software product, e.g.
                        <code>product</code>, or be generic, e.g.
                        <code>license</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="artifactName"
                        minOccurs="0" default="-">
                <xs:annotation>
                    <xs:documentation>
                        The display name of the parent POM for the generated
                        project.
                        This could be the name of your software product, e.g.
                        <code>Product</code>, or be generic, e.g.
                        <code>License</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="company">
                <xs:annotation>
                    <xs:documentation>
                        The display name of your company, e.g.
                        <code>Company Inc.</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:CustomClasspathScope"
                        name="customClasspathScope"
                        minOccurs="0" default="compile">
                <xs:annotation>
                    <xs:documentation>
                        Declares the scope of the class path for the custom classes referenced by the properties with
                        the name pattern <code>*Class</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:boolean" name="disableWizard"
                        minOccurs="0" default="false">
                <xs:annotation>
                    <xs:documentation>
                        Whether or not the Swing wizard dialog in the Key
                        Manager module should be disabled.
                        Select
                        <code>true</code>
                        to cut the dependency on the TrueLicense Swing module
                        and reduce the code size.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:JavaIdentifierList" name="editions"
                        minOccurs="0" default="standard">
                <xs:annotation>
                    <xs:documentation>
                        A space separated list of edition names, ordered from
                        supersets to subsets, e.g.
                        <code>enterprise standard</code>.
                        Each name must be a valid Java identifier name and
                        should be camel-cased with a lower-case initial
                        character.
                        The names
                        <code>edition</code>
                        and
                        <code>ftp</code>
                        are reserved for internal use.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:nonNegativeInteger" name="freeTrialPeriod"
                        minOccurs="0" default="0">
                <xs:annotation>
                    <xs:documentation>
                        The number of days for an auto-generated
                        <abbr title="Free Trial Period">FTP</abbr>.
                        Needs to be a non-negative integer, e.g.
                        <code>30</code>.
                        Specify
                        <code>0</code>
                        to disable the auto-generation of FTP license keys.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="ftpKeyStoreFile"
                        minOccurs="0" default="-">
                <xs:annotation>
                    <xs:documentation>
                        The path of the FTP keystore file in the Key Manager
                        module relative to the base path
                        <code>
                            ${dollar}{artifactId}-keymgr/src/main/resources/
                        </code>.
                        This property is ignored if the property
                        <code>freeTrialPeriod</code>
                        is set to
                        <code>0</code>.
                        Otherwise, if the value is set to
                        <code>-</code>,
                        then it gets overridden with the value of the property
                        <code>publicKeyStoreFile</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="ftpSecretMarkerClass"
                        minOccurs="0" default="-">
                <xs:annotation>
                    <xs:documentation>
                        A fully qualified binary class name which declares the
                        user or system preferences node to use for storing the
                        auto-generated FTP license key.
                        This property is ignored if the property
                        <code>freeTrialPeriod</code>
                        is set to
                        <code>0</code>.
                        Otherwise, the
                        <strong>package name</strong>
                        of the referenced class needs to be kept
                        <strong>absolutely secret</strong>
                        because removing the FTP license key from the
                        preferences node triggers the auto-generation of another
                        FTP license key!
                        The named class gets dynamically loaded at run time, so
                        it doesn't have to be on the compile-time class path of
                        the Key Manager module.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:GroupId" name="groupId">
                <xs:annotation>
                    <xs:documentation>
                        The Maven group ID for the generated project.
                        This could be the reversed domain name for your company
                        plus the name of the software product.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:boolean" name="hideUninstallAction"
                        minOccurs="0" default="false">
                <xs:annotation>
                    <xs:documentation>
                        Whether or not the Swing wizard dialog in the Key
                        Manager module should hide the action for uninstalling
                        the license key.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="keyGenAuthorization"
                        minOccurs="0" default="-">
                <xs:annotation>
                    <xs:documentation>
                        A fully qualified expression of the type
                        <a href="../apidocs/${apiPackagePath}/LicenseManagementAuthorization.html">
                            <code>${apiPackage}.LicenseManagementAuthorization</code>
                        </a>
                        for use in the Key Generator module.
                        Select
                        <code>-</code>
                        to use no license authorization.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="keyGenValidation"
                        minOccurs="0" default="-">
                <xs:annotation>
                    <xs:documentation>
                        A fully qualified expression of the type
                        <a href="../apidocs/${apiPackagePath}/LicenseValidation.html">
                            <code>${apiPackage}.LicenseValidation</code>
                        </a>
                        for use in the Key Generator module.
                        Select
                        <code>-</code>
                        to use only the built-in license validation function.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:LicenseFunctionComposition"
                        name="keyGenValidationComposition"
                        minOccurs="0" default="decorate">
                <xs:annotation>
                    <xs:documentation>
                        Selects the composition strategy for license validation
                        functions in the Key Generator module.
                        This property is ignored if the property
                        <code>keyGenValidation</code>
                        is set to
                        <code>-</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="keyMgrAuthorization"
                        minOccurs="0" default="-">
                <xs:annotation>
                    <xs:documentation>
                        A fully qualified expression of the type
                        <a href="../apidocs/${apiPackagePath}/LicenseManagementAuthorization.html">
                            <code>${apiPackage}.LicenseManagementAuthorization</code>
                        </a>
                        for use in the Key Manager module.
                        Select
                        <code>-</code>
                        to use no license authorization.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="keyMgrClock"
                        minOccurs="0" default="-">
                <xs:annotation>
                    <xs:documentation>
                        A fully qualified expression of the type
                        <code>java.time.Clock</code>
                        for use in the Key Manager module.
                        Select
                        <code>-</code>
                        to use the system clock.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="keyMgrValidation"
                        minOccurs="0" default="-">
                <xs:annotation>
                    <xs:documentation>
                        A fully qualified expression of the type
                        <a href="../apidocs/${apiPackagePath}/LicenseValidation.html">
                            <code>${apiPackage}.LicenseValidation</code>
                        </a>
                        for use in the Key Manager module.
                        Select
                        <code>-</code>
                        to use only the built-in license validation function.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:LicenseFunctionComposition"
                        name="keyMgrValidationComposition"
                        minOccurs="0" default="decorate">
                <xs:annotation>
                    <xs:documentation>
                        Selects the composition strategy for license validation
                        functions in the Key Manager module.
                        This property is ignored if the property
                        <code>keyMgrValidation</code>
                        is set to
                        <code>-</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:KeyPairAlgorithm" name="keyPairAlgorithm"
                        minOccurs="0" default="auto">
                <xs:annotation>
                    <xs:documentation>
                        The algorithm to use when generating key pairs in the
                        keystore files on the first build.
                        This property is ignored if the keystore files already
                        exist.
                        The algorithm needs to be supported by one of the
                        security providers which are installed in the JRE.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:nonNegativeInteger" name="keyPairSize"
                        minOccurs="0" default="0">
                <xs:annotation>
                    <xs:documentation>
                        The key size in bits when generating key pairs in the
                        keystore files at the first build.
                        This property is ignored if the keystore files already
                        exist.
                        Otherwise, if the value is set to
                        <code>0</code>,
                        then the default value of the keytool is used.
                        Otherwise, the bit size needs to match the configured
                        <code>${dollar}{keyPairAlgorithm}</code>
                        and be supported by one of the security providers which
                        are installed in the JRE/JDK.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:KeyStoreType" name="keyStoreType"
                        minOccurs="0" default="auto">
                <xs:annotation>
                    <xs:documentation>
                        The default keystore type.
                        The type needs to be supported by one of the security
                        providers which are installed in the JRE.
                        If the value is set to
                        <code>auto</code>,
                        then it gets overridden as follows:
                        If the value of the
                        <code>licenseKeyFormat</code>
                        property is set to
                        <code>V1</code>,
                        then this gets set to
                        <code>JKS</code>,
                        otherwise it gets set to
                        <code>JCEKS</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:LicenseKeyFormat" name="licenseKeyFormat"
                        minOccurs="0" default="V2/JSON">
                <xs:annotation>
                    <xs:documentation>
                        The format of the license keys.
                        Select
                        <code>V1</code>
                        if you need to retain compatibility with license keys
                        generated with TrueLicense 1.
                        Otherwise, select
                        <code>V2/XML</code>
                        if you want to exclude an additional dependency on the
                        Jackson JSON Processor.
                        Otherwise, select
                        <code>V2/JSON</code>
                        for the smallest license keys and the fastest
                        processing.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <!--
            Do NOT remove the `minOccurs` attribute and do NOT add a
            `default` attribute - see https://java.net/jira/browse/TRUELICENSE-152 .
            -->
            <xs:element type="xs:token" name="package" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The base package name of the generated project.
                        It's best practice to use the expression
                        <code>${dollar}{groupId}</code>
                        or
                        <code>${dollar}{groupId}.${dollar}{artifactId}</code>
                        if this results in a valid package name.
                        If this property is undefined, then the Maven Archetype
                        Plugin sets its value to
                        <code>${dollar}{groupId}</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:Password" name="password">
                <xs:annotation>
                    <xs:documentation>
                        The common password for accessing keystores and
                        encrypting license keys.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:PbeAlgorithm" name="pbeAlgorithm"
                        minOccurs="0" default="auto">
                <xs:annotation>
                    <xs:documentation>
                        The algorithm for the password based encryption.
                        The algorithm needs to be supported by one of the
                        security providers which are installed in the JRE.
                        If the value is set to
                        <code>auto</code>,
                        then it gets overridden as follows:
                        If the value of the
                        <code>licenseKeyFormat</code>
                        property is set to
                        <code>V1</code>,
                        then this gets set to
                        <code>PBEWithMD5AndDES</code>,
                        otherwise it gets set to
                        <code>PBEWithSHA1AndDESede</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:PreferencesType" name="preferencesType"
                        minOccurs="0" default="user">
                <xs:annotation>
                    <xs:documentation>
                        The type of the preferences nodes where to install
                        license keys.
                        Note that the value
                        <code>system</code>
                        generally requires the JVM to be run with administrator
                        privileges or otherwise a
                        <a href="http://docs.oracle.com/javase/${javase.major}/docs/api/java/util/prefs/BackingStoreException.html">
                            <code>java.util.prefs.BackingStoreException</code>
                        </a>
                        may get thrown by the generated integration tests.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="privateKeyStoreFile"
                        minOccurs="0" default="private.ks">
                <xs:annotation>
                    <xs:documentation>
                        The path of the private keystore file in the Key
                        Generator module relative to the base path
                        <code>
                            ${dollar}{artifactId}-keygen/src/main/resources/
                        </code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="publicKeyStoreFile"
                        minOccurs="0" default="public.ks">
                <xs:annotation>
                    <xs:documentation>
                        The path of the public keystore file in the Key
                        Manager module relative to the base path
                        <code>
                            ${dollar}{artifactId}-keymgr/src/main/resources/
                        </code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:SignatureAlgorithm" name="signatureAlgorithm"
                        minOccurs="0" default="auto">
                <xs:annotation>
                    <xs:documentation>
                        The algorithm to use when signing a generated key
                        pair in a keystore file at the first build.
                        This property is ignored if the keystore file already
                        exists.
                        Otherwise, if the value is set to
                        <code>auto</code>,
                        then the default value of the keytool is used.
                        Otherwise, the signature algorithm needs to match the
                        configured
                        <code>${dollar}{keyPairAlgorithm}</code>
                        and be supported by one of the security providers which
                        are installed in the JRE/JDK.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="subject">
                <xs:annotation>
                    <xs:documentation>
                        The license management subject.
                        The value of this property gets stored in the generated
                        license keys and is used for validation.
                        A
                        <a href="../apidocs/${apiPackagePath}/LicenseValidationException.html">
                            <code>
                                ${apiPackage}.LicenseValidationException
                            </code>
                        </a>
                        is thrown if the validation fails.
                        It's best practice to include the name of your software
                        product and a version number range for which the license
                        keys are valid, e.g.
                        <code>Product 1</code>
                        or
                        <code>Product 1.X</code>.
                        The license validation step compares the entire string,
                        so the version number format doesn't matter.
                        If you want to obsolete existing license keys in a
                        future release then all you need to do is to change the
                        value, e.g. to
                        <code>Product 2</code>
                        or
                        <code>Product 2.X</code>.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:token" name="trueLicenseVersion"
                        minOccurs="0" default="${truelicense.version}">
                <xs:annotation>
                    <xs:documentation>
                        The TrueLicense version to depend upon.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="xs:boolean" name="verboseCli"
                        minOccurs="0" default="false">
                <xs:annotation>
                    <xs:documentation>
                        Whether or not the
                        <abbr title="Command Line Interface">CLI</abbr>
                        should write debugging information to the standard error
                        stream by default.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="p:Version" name="version">
                <xs:annotation>
                    <xs:documentation>
                        The Maven version for the generated project.
                        This should match the version of your software product.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
    </xs:complexType>
    <xs:simpleType name="Password">
        <xs:annotation>
            <xs:documentation>
                A string of at least eight characters which must contain letters
                and digits.
                You should consider this to be the bare minimum.
                Choosing a longer password with additional punctuation
                characters significantly improves the security level of your
                licensing schema.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="8"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="PbeAlgorithm"
                   h:href="http://docs.oracle.com/javase/${javase.major}/docs/technotes/guides/security/StandardNames.html#Cipher">
        <xs:restriction base="xs:token">
            <xs:enumeration value="auto"/>
            <xs:enumeration value="PBEWithMD5AndDES"/>
            <xs:enumeration value="PBEWithMD5AndTripleDES"/>
            <xs:enumeration value="PBEWithSHA1AndDESede"/>
            <xs:enumeration value="PBEWithSHA1AndRC2_40"/>
            <xs:enumeration value="PBEWithSHA1AndRC2_128"/>
            <xs:enumeration value="PBEWithSHA1AndRC4_40"/>
            <xs:enumeration value="PBEWithSHA1AndRC4_128"/>
            <xs:enumeration value="PBEWithHmacSHA1AndAES_128"/>
            <xs:enumeration value="PBEWithHmacSHA224AndAES_128"/>
            <xs:enumeration value="PBEWithHmacSHA256AndAES_128"/>
            <xs:enumeration value="PBEWithHmacSHA384AndAES_128"/>
            <xs:enumeration value="PBEWithHmacSHA512AndAES_128"/>
            <xs:enumeration value="PBEWithHmacSHA1AndAES_256"/>
            <xs:enumeration value="PBEWithHmacSHA224AndAES_256"/>
            <xs:enumeration value="PBEWithHmacSHA256AndAES_256"/>
            <xs:enumeration value="PBEWithHmacSHA384AndAES_256"/>
            <xs:enumeration value="PBEWithHmacSHA512AndAES_256"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="PreferencesType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="system"/>
            <xs:enumeration value="user"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="Properties">
        <xs:sequence>
            <!--xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element type="p:Documentation" name="documentation"/>
            </xs:choice-->
            <xs:element type="p:Documentation" name="documentation" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element type="p:List" name="list"/>
        </xs:sequence>
        <xs:attribute type="xs:token" name="name"/>
        <xs:attribute type="xs:token" name="version"/>
        <xs:attribute ref="xml:lang"/>
    </xs:complexType>
    <xs:simpleType name="SignatureAlgorithm"
                   h:href="http://docs.oracle.com/javase/${javase.major}/docs/technotes/guides/security/StandardNames.html#Signature">
        <xs:restriction base="xs:token">
            <xs:enumeration value="auto"/>
            <xs:enumeration value="NONEwithDSA"/>
            <xs:enumeration value="SHA1withDSA"/>
            <xs:enumeration value="SHA224withDSA"/>
            <xs:enumeration value="SHA256withDSA"/>
            <xs:enumeration value="NONEwithECDSA"/>
            <xs:enumeration value="SHA1withECDSA"/>
            <xs:enumeration value="SHA224withECDSA"/>
            <xs:enumeration value="SHA256withECDSA"/>
            <xs:enumeration value="SHA384withECDSA"/>
            <xs:enumeration value="SHA512withECDSA"/>
            <xs:enumeration value="NONEwithRSA"/>
            <xs:enumeration value="MD2withRSA"/>
            <xs:enumeration value="MD5withRSA"/>
            <xs:enumeration value="SHA1withRSA"/>
            <xs:enumeration value="SHA224withRSA"/>
            <xs:enumeration value="SHA256withRSA"/>
            <xs:enumeration value="SHA384withRSA"/>
            <xs:enumeration value="SHA512withRSA"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Version">
        <xs:annotation>
            <xs:documentation>
                A Maven version must conform to the
                <a href="http://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-pom-syntax.html#pom-reationships-sect-versions">
                    Maven version number
                </a>
                requirements.
                See also
                <a href="http://maven.apache.org/pom.html#Maven_Coordinates">
                    Maven - POM Reference - Maven Coordinates
                </a>.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token"/>
    </xs:simpleType>
</xs:schema>
